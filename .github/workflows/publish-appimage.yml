name: Build AppImage
on:
  push:
    branches:
      - main
    tags:
      - v*
    paths-ignore:
      - web/**
      - doc/**
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SCCACHE_VERSION: '0.9.1'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-24.04
        arch:
          - x86_64
    permissions:
      contents: write
      discussions: write
    steps:
      - run: sudo apt-get -qq update
      - name: Install dependencies
        run: |
          sudo apt-get install -yqq --no-install-recommends \
            audacious-dev \
            cmake \
            gawk \
            gperf \
            lcov \
            libaudclient-dev \
            libcairo2-dev \
            libcurl4-gnutls-dev \
            libdbus-glib-1-dev \
            libfuse2 \
            libglib2.0-dev \
            libical-dev \
            libimlib2-dev \
            libircclient-dev \
            libiw-dev \
            liblua5.3-dev \
            libmicrohttpd-dev \
            libmysqlclient-dev \
            libpulse-dev \
            librsvg2-dev \
            libsystemd-dev \
            libwayland-bin \
            libwayland-dev \
            libx11-dev \
            libxdamage-dev \
            libxext-dev \
            libxft-dev \
            libxinerama-dev \
            libxml2-dev \
            libxmmsclient-dev \
            libxnvctrl-dev \
            ncurses-dev \
            ninja-build \
            pandoc \
            wayland-protocols
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: 'requirements-dev.txt'
      - name: Install Python dependencies
        run: |
          if [ -f "requirements-dev.txt" ]; then
            echo "Installing Python dependencies from requirements-dev.txt"
            pip install -r requirements-dev.txt
          else
            echo "Warning: requirements-dev.txt not found, skipping Python dependencies installation"
          fi
      - name: Import GPG Deploy Key
        # only run on main branch
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.GPG_DEPLOY_KEY }}" ]; then
            echo "${{ secrets.GPG_DEPLOY_KEY }}" > appimage/secret.gpg
            gpg --import appimage/secret.gpg
          else
            echo "Warning: GPG_DEPLOY_KEY not set, skipping GPG key import"
          fi
      - name: Set clang version for Ubuntu 22.04
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "CLANG_VERSION=15" | tee -a $GITHUB_ENV
      - name: Set clang version for Ubuntu 24.04
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CLANG_VERSION=18" | tee -a $GITHUB_ENV
      - name: Install libc++, set CC and CXX env vars
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
            # For Ubuntu 24.04, install clang-18 explicitly with proper signing key handling
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/llvm-snapshot.gpg
            echo "deb [signed-by=/usr/share/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/noble/ llvm-toolchain-noble-18 main" | sudo tee /etc/apt/sources.list.d/llvm-18.list
            sudo apt-get update || echo "Warning: apt-get update returned non-zero exit code, continuing anyway"
            
            # Continue with installation even if apt-get update had warnings
            sudo apt-get install -yqq --no-install-recommends \
              clang-18 \
              libc++-18-dev \
              libc++abi-18-dev
              
            # Verify clang installation
            if ! dpkg -l | grep -q clang-18; then
              echo "Warning: clang-18 installation may have failed"
              if command -v clang >/dev/null 2>&1; then
                echo "Using system clang instead"
                echo "CC=clang" | tee -a $GITHUB_ENV
                echo "CXX=clang++" | tee -a $GITHUB_ENV
              else
                echo "Error: No clang compiler found"
                exit 1
              fi
            else
              echo "CC=clang-18" | tee -a $GITHUB_ENV
              echo "CXX=clang++-18" | tee -a $GITHUB_ENV
            fi
          else
            # For other Ubuntu versions
            sudo apt-get install -yqq --no-install-recommends \
              libc++-${CLANG_VERSION}-dev \
              libc++abi-${CLANG_VERSION}-dev
              
            echo "CC=clang-${CLANG_VERSION}" | tee -a $GITHUB_ENV
            echo "CXX=clang++-${CLANG_VERSION}" | tee -a $GITHUB_ENV
            
            # Verify compiler exists
            if ! command -v ${CC} >/dev/null 2>&1; then
              echo "Warning: $CC not found, falling back to system clang"
              if command -v clang >/dev/null 2>&1; then
                echo "CC=clang" | tee -a $GITHUB_ENV
                echo "CXX=clang++" | tee -a $GITHUB_ENV
              else
                echo "Error: No clang compiler found"
                exit 1
              fi
            fi
          fi

      - name: Install sccache
        if: startsWith(github.ref, 'refs/tags/') != true
        run: .github/scripts/setup-sccache.sh
      - name: Load cached compilation artifacts
        if: startsWith(github.ref, 'refs/tags/') != true
        id: compiler-cache
        uses: actions/cache@v4
        with:
          path: '${{ env.SCCACHE_DIR }}'
          key: sccache-${{ matrix.os }}-${{ matrix.arch }}
          restore-keys: |
            sccache-${{ matrix.os }}-${{ matrix.arch }}
            sccache-${{ matrix.os }}
            sccache-
      - name: Build AppImage
        run: |
          # Check if build.sh exists
          if [ ! -f "./appimage/build.sh" ]; then
            echo "Error: AppImage build script not found at ./appimage/build.sh"
            exit 1
          fi
          
          # Make script executable
          chmod +x ./appimage/build.sh
          
          # Run the build script
          ./appimage/build.sh
        env:
          RELEASE: "${{ startsWith(github.ref, 'refs/tags/') && 'ON' || 'OFF' }}"
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
      - name: Show sccache stats
        if: startsWith(github.ref, 'refs/tags/') != true
        run: |
          if command -v sccache >/dev/null 2>&1; then
            sccache --show-stats || echo "Warning: Failed to get sccache stats, continuing anyway"
          else
            echo "sccache not available"
          fi
      - name: Test AppImage
        run: |
          if [ -f "./conky-x86_64.AppImage" ]; then
            chmod +x ./conky-x86_64.AppImage
            ./conky-x86_64.AppImage --version || echo "AppImage not runnable in CI environment - continuing"
          else
            echo "Warning: AppImage not created or not found at ./conky-x86_64.AppImage"
            # List files in current directory to debug
            ls -la
            echo "Continuing despite missing AppImage"
          fi
      - name: Set CONKY_VERSION
        run: |
          # Extract version from CMake or use direct version method
          if [ -f "./conky-x86_64.AppImage" ]; then
            chmod +x ./conky-x86_64.AppImage
            CONKY_VERSION=$(./conky-x86_64.AppImage --version 2>/dev/null | grep -oP 'Conky \K[0-9]+\.[0-9]+\.[0-9]+' || echo "1.22.1")
          else
            CONKY_VERSION=$(grep -oP 'CONKY_VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt 2>/dev/null || echo "1.22.1")
          fi
          echo "CONKY_VERSION=$CONKY_VERSION" | tee -a $GITHUB_ENV
      - name: Rename AppImage artifacts
        run: |
          if [ -f "./conky-x86_64.AppImage" ]; then
            echo "Renaming AppImage to conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage"
            mv conky-x86_64.AppImage conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage || echo "Warning: Failed to rename AppImage"
          fi
          if [ -f "./conky-x86_64.AppImage.sha256" ]; then
            echo "Renaming SHA256 to conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage.sha256"
            mv conky-x86_64.AppImage.sha256 conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage.sha256 || echo "Warning: Failed to rename SHA256 file"
          fi
      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          path: 'conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage'
          name: 'conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage'
          if-no-files-found: warn
      - name: Upload AppImage checksum artifact
        uses: actions/upload-artifact@v4
        with:
          path: 'conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage.sha256'
          name: 'conky-${{ matrix.os }}-${{ matrix.arch }}-v${{ env.CONKY_VERSION }}.AppImage.sha256'
          if-no-files-found: warn
      - name: Upload man page artifact
        uses: actions/upload-artifact@v4
        with:
          name: conky.1.gz
          path: conky.1.gz
          # conky.1.gz is created by all jobs!
          overwrite: true
          if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Create Conky Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          discussion_category_name: General
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            ${{ github.workspace }}/artifacts/**/*
